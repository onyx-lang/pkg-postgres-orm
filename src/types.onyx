package postgres.orm

use core
use runtime
use runtime.info {
    get_type_info,
    Type_Info_Enum
}

#local
registered_types: Map(type_expr, str);

register_type :: (type: type_expr, pg_type: str) {
    registered_types[type] = pg_type;
}

#package
onyx_type_to_postgres_type :: (type: type_expr) -> str {
    switch type {
        case bool     do return "bool";
        case i8, u8   do return "character";
        case i16, u16 do return "smallint";
        case i32, u32 do return "integer";
        case i64, u64 do return "bigint";
        case f32      do return "real";
        case f64      do return "double precision";

        case str      do return "text";

        #if #defined(json) {
            case json.Json do return "json";
        }

        #if #defined(core.time.Date) {
            case core.time.Date do return "Date";
        }

        #if #defined(core.time.Timestamp) {
            case core.time.Timestamp do return "Timestamp";
        }

        case #default {
            info := get_type_info(type);
            switch info.kind {
                case .Enum {
                    e := cast(^Type_Info_Enum) info;
                    return onyx_type_to_postgres_type(e.backing_type);
                }
            }
        }
    }

    return registered_types[type] ?? "";
}
