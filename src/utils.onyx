package postgres.orm

use core
use runtime.info {
    get_type_info,
    Type_Info_Pointer
}

#package
is_zero_value :: (z: any) -> bool {
    switch z.type {
        num_case :: macro (t: type_expr) {
            case t do return *cast(^t) z.data == 0;
        }

        num_case(i8);
        num_case(i16);
        num_case(i32);
        num_case(i64);
        num_case(u8);
        num_case(u16);
        num_case(u32);
        num_case(u64);
        num_case(f32);
        num_case(f64);

        case str {
            return (cast(^str) z.data).length == 0;
        }
    }

    size := runtime.info.size_of(z.type);
    for size {
        if (cast(^u8) z.data)[it] != 0 do return false;
    }

    return true;
}

#package
#doc """
    This procedure write the string value of 'v' to the 
    writer, after escaping it using 'escape_str' from
    the postgres package.
"""
write_escaped_value :: (ctx: ^ORMContext, w: ^io.Writer, v: any) {
    formatted_string := conv.format_va("{d}", .[v]);
    defer delete(^formatted_string);

    escaped_string := postgres.escape_str(ctx.conn, formatted_string);
    defer delete(^escaped_string);

    if v.type == str {
        io.write(w, "'{}'", escaped_string);
    } else {
        io.write(w, "{}", escaped_string);
    }
}

#inject
ORMContext.quick_exec :: macro (ctx: ^ORMContext, $type: type_expr, stmt: str) -> [] type {
    res := ctx->exec_log(stmt);
    defer res->clear();
    return res->all_as(type);
}


#inject
ORMContext.exec_log :: (ctx: ^ORMContext, stmt: str) -> postgres.Result {
    if ctx.log_sql_statements {
        core.printf("[INFO ] {}\n", stmt);
    }

    return ctx.conn->exec(stmt);
}

#package
strip_pointer_and_check_model :: (ctx: ^ORMContext, data: ^any, require_primary_key := true) => {
    //
    // This procedure expects data to be a pointer to
    // a model, so first the pointer type has to be
    // stripped off and checked.
    if info := get_type_info(data.type); info.kind != .Pointer {
        return false;
    } else {
        data.type = (cast(^Type_Info_Pointer) info).to;
        data.data = *cast(^rawptr) data.data;
    }

    //
    // This is type is not known to be a model, don't
    // allow it to be created.
    if !(ctx.models->has(data.type)) {
        return false;
    }

    if !require_primary_key {
        return true;
    }

    //
    // If the model does not have a primary key,
    // it cannot be used in any of the functions
    // that use this function.
    if model := ^ctx.models[data.type]; model.primary_col == -1 {
        return false;
    }

    return true;
}